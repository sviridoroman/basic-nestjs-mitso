openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_root
      parameters: []
      responses:
        '200':
          description: ""
  /login:
    post:
      operationId: AppController_login
      parameters: []
      responses:
        '201':
          description: ""
  /users:
    post:
      operationId: UsersController_create
      summary: 'Create one User ðŸ‘»'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: 'The found record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
    get:
      operationId: UsersController_findAll
      summary: 'Retrieve many Users ðŸ‘»'
      parameters: []
      responses:
        '200':
          description: 'The found records'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseUserDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
  '/users/{id}':
    get:
      operationId: UsersController_findOne
      summary: 'Retrieve one User ðŸ‘»'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'The found record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
    put:
      operationId: UsersController_update
      summary: 'Update one User ðŸ‘»'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: 'The updated record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
    delete:
      operationId: UsersController_remove
      summary: 'Delete one User ðŸ‘»'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'The deleted record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
  /directors:
    post:
      operationId: DirectorsController_create
      summary: Created
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDirectorDto'
      responses:
        '201':
          description: 'The found record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDirectorDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
    get:
      operationId: DirectorsController_getAll
      summary: 'List of directors'
      parameters: []
      responses:
        '200':
          description: 'All directors'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseDirectorDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
  '/directors/{id}':
    get:
      operationId: DirectorsController_getById
      summary: 'Find director'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'Director founded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDirectorDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
    put:
      operationId: DirectorsController_update
      summary: 'Update director'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDirectorDto'
      responses:
        '200':
          description: 'Director updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDirectorDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
    delete:
      operationId: DirectorsController_deleteById
      summary: 'Delete director'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'The deleted director'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDirectorDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
  '/films/{directorId}/films':
    post:
      operationId: FilmsController_create
      summary: Created
      parameters:
        -
          name: directorId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFilmDto'
      responses:
        '201':
          description: 'The found record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseFilmDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
  /films:
    get:
      operationId: FilmsController_getAll
      summary: 'List of films'
      parameters: []
      responses:
        '200':
          description: 'All films'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseFilmDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
  '/films/{id}':
    get:
      operationId: FilmsController_getById
      summary: 'Find film'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'Film founded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseFilmDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
    put:
      operationId: FilmsController_update
      summary: 'Update film'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFilmDto'
      responses:
        '200':
          description: 'Film updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseFilmDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
    delete:
      operationId: FilmsController_deleteById
      summary: 'Delete director'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'The deleted film'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseFilmDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
  /results:
    post:
      operationId: ResultssController_create
      summary: Created
      parameters:
        -
          name: filmID
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResultDto'
      responses:
        '201':
          description: 'The found record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseResultDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
    get:
      operationId: ResultssController_getAll
      summary: 'List of results'
      parameters: []
      responses:
        '200':
          description: 'All results'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseResultDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
  '/results/{id}':
    get:
      operationId: ResultssController_getById
      summary: 'Find result'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'Results founded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseResultDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
    put:
      operationId: ResultssController_update
      summary: 'Update result'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResultDto'
      responses:
        '200':
          description: 'Result updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseResultDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
    delete:
      operationId: ResultssController_deleteById
      summary: 'Delete result'
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'The deleted result'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseResultDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        -
          bearer: []
info:
  title: 'Nest NodeJS 2021Q2'
  description: 'NestJS, TypeORM, PostgresDB'
  version: '1.0'
  contact: {}
tags:
  -
    name: nest
    description: ""
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        name:
          type: string
        login:
          type: string
        password:
          type: string
          minimum: 6
      required:
        - name
        - login
        - password
    ResponseUserDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        login:
          type: string
      required:
        - id
        - name
        - login
    UpdateUserDto:
      type: object
      properties: {}
    CreateDirectorDto:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        country:
          type: string
        birthday:
          type: string
      required:
        - name
        - surname
        - country
        - birthday
    ResponseDirectorDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        surname:
          type: string
        country:
          type: string
        birthday:
          type: string
      required:
        - id
        - name
        - surname
        - country
        - birthday
    UpdateDirectorDto:
      type: object
      properties: {}
    CreateFilmDto:
      type: object
      properties:
        title:
          type: string
        price:
          type: number
        genre:
          type: string
        year:
          type: number
        directorId:
          type: string
      required:
        - title
        - price
        - genre
        - year
        - directorId
    ResponseFilmDto:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        price:
          type: number
        genre:
          type: string
        year:
          type: number
        directorId:
          type: string
      required:
        - id
        - title
        - price
        - genre
        - year
        - directorId
    UpdateFilmDto:
      type: object
      properties: {}
    CreateResultDto:
      type: object
      properties:
        country:
          type: string
        proceeds:
          type: string
        views:
          type: string
        filmId:
          type: string
      required:
        - country
        - proceeds
        - views
        - filmId
    ResponseResultDto:
      type: object
      properties:
        id:
          type: string
        country:
          type: string
        proceeds:
          type: string
        views:
          type: string
        filmId:
          type: string
      required:
        - id
        - country
        - proceeds
        - views
        - filmId
    UpdateResultDto:
      type: object
      properties: {}
